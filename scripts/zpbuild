#!/usr/bin/env python2

import sys, os, string
import urllib
from lxml import etree
from subprocess import Popen,PIPE,STDOUT
from zpbuild_globals import builddefs, zprepo, zptemp

if not os.path.exists(builddefs):
	print("Cannot find build definition %s." % builddefs)
	sys.exit(1)

def readBuildDefs(fn):
	l = open(fn, 'r')
	xmlroot = etree.parse(l)
	l.close()
	return xmlroot

xmlroot = readBuildDefs(builddefs)
build_count = 0
build_fail = 0
build_exist = 0

logdir=os.path.join(zprepo,"log")
logdir_succ = logdir + "_succ"
logdir_fail = logdir + "_fail"
for ld in ( logdir, logdir_succ, logdir_fail ):
	if not os.path.isdir(ld):
		os.makedirs(ld)
	for f in os.listdir(ld):
		os.unlink(os.path.join(ld,f))
required_tags = ( "title", "version", "python_version", "zenpack_name", "tag", "src_uri" )

#blog = open(os.path.join(zprepo, "zpbuild.txt"),"w")

def log(msg):
	sys.stdout.write(msg)
	#blog.write(msg)

for b in xmlroot.iter("build"):
	build_env = { "ZPREPO" : zprepo, "ZPTEMP" : zptemp, "PATH" : os.environ["PATH"] }
	valid = True
	for el in required_tags:
		xml_el = b.xpath(el)
		if len(xml_el) > 0:
			build_env[el.upper()] = xml_el[0].text
		else:
			log("Build definition missing required XML element \"{0}\":\n".format(el))
			log(etree.tostring(b, pretty_print=True))
			valid = False
			break
	if not valid:
		continue
	log("Processing %s version %s for Python %s (%s)..." % ( build_env["TITLE"], build_env["VERSION"], build_env["PYTHON_VERSION"], build_env["ZENPACK_NAME"] ))
	pipe = Popen(os.getcwd() + "/build.sh", env=build_env, stderr=STDOUT, stdout=PIPE)
	output = pipe.communicate()[0]
	status = pipe.wait()
	logfn = "{0[ZENPACK_NAME]}-{0[VERSION]}-py{0[PYTHON_VERSION]}.txt".format(build_env)
	if os.path.exists(os.path.join(logdir,logfn)):
		log("\nError: Log for %s already exists -- indicates duplicate build entry or wrong/duplicate ZenPack name\n" % logfn)
		continue
	a = open(os.path.join(logdir,logfn),'w')
	if status == 0:
		os.symlink("../log/" + logfn, os.path.join(logdir_succ,logfn))
		log(": build OK\n")
	elif status == 2:
		build_fail += 1
		os.symlink("../log/" + logfn, os.path.join(logdir_fail,logfn))
		log(": build FAILED\n")
	elif status == 1:
		os.symlink("../log/" + logfn, os.path.join(logdir_succ,logfn))
		build_exist += 1
		log(": skipped\n")
	a.write(output)
	a.close()
	build_count += 1

log("%s builds completed. %s failed. %s skipped (already existed).\n" % (build_count, build_fail, build_exist))
#blog.close()
