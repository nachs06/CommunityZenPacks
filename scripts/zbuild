#!/usr/bin/env python2

import sys, os, string
import urllib
from lxml import etree
from subprocess import Popen,PIPE,STDOUT

if len(sys.argv) != 2:
	print("Please specify input file.")
	sys.exit(1)

if not os.path.exists(sys.argv[1]):
	print("Cannot find input file.")
	sys.exit(1)

def readBuildDefs(fn):
	l = open(fn, 'r')
	xmlroot = etree.parse(l)
	l.close()
	return xmlroot

xmlroot = readBuildDefs(sys.argv[1])

build_count = 0
build_fail = 0
build_exist = 0

logdir="/var/tmp/zenpack_root/log"
logdir_succ = logdir + "_succ"
logdir_fail = logdir + "_fail"
for ld in ( logdir, logdir_succ, logdir_fail ):
	if not os.path.isdir(ld):
		os.makedirs(ld)
	for f in os.listdir(ld):
		os.unlink(os.path.join(ld,f))
required_tags = ( "title", "version", "python_version", "zenpack_name", "tag", "src_uri" )
for b in xmlroot.iter("build"):
	build_env = { "PATH" : os.environ["PATH"] }
	for el in required_tags:
		xml_el = b.xpath(el)
		if len(xml_el) > 0:
			build_env[el.upper()] = xml_el[0].text
		else:
			print("Build definition missing required XML element \"{0}\":".format(el))
			print etree.tostring(b, pretty_print=True)
			continue
	pipe = Popen(os.getcwd() + "/build.sh", env=build_env, stderr=STDOUT, stdout=PIPE)
	output = pipe.communicate()[0]
	status = pipe.wait()
	logfn = "{0[ZENPACK_NAME]}-{0[VERSION]}-py{0[PYTHON_VERSION]}".format(build_env)
	a = open(os.path.join(logdir,logfn),'w')
	if status == 0:
		os.symlink("../log/" + logfn, os.path.join(logdir_succ,logfn))
	elif status == 2:
		build_fail += 1
		os.symlink("../log/" + logfn, os.path.join(logdir_fail,logfn))
	elif status == 1:
		build_exist += 1
	a.write(output)
	a.close()
	build_count += 1

print("%s builds completed. %s failed. %s skipped (already existed)." % (build_count, build_fail, build_exist))
