#!/usr/bin/env python2

import sys, os, string
import urllib
from subprocess import Popen,PIPE,STDOUT
from zpbuild_globals_ng import builddefs, zprepo, zptemp
import codecs, json

if not os.path.exists(builddefs):
	print("Cannot find build definition %s." % builddefs)
	sys.exit(1)

def readBuildDefs(json_fn=builddefs):
	l = codecs.open(json_fn, 'r', 'utf-8')
	my_json = json.load(l)
	l.close()
	return my_json

build_count = 0
build_fail = 0
build_exist = 0

logdir=os.path.join(zprepo,"log")
logdir_succ = logdir + "_succ"
logdir_fail = logdir + "_fail"
for ld in ( logdir, logdir_succ, logdir_fail ):
	if not os.path.isdir(ld):
		os.makedirs(ld)
	for f in os.listdir(ld):
		os.unlink(os.path.join(ld,f))

def log(msg):
	sys.stdout.write(msg+"\n")
	#blog.write(msg)

def buildPack(zpname, zenpack_json, rel_version):
	global build_count, build_fail, build_exist
	# get python name from name of repo:
	pyname = zenpack_json["Source URI"]
	if pyname[-4:] == ".git":
		pyname = pyname[:-4]
	pyname = pyname.split("/")[-1]
	# environment variables passed to build script:
	build_env = { 
		"PATH" : os.environ["PATH"],
		"ZPTEMP" : zptemp, 
		"ZPREPO" : zprepo, 
		"PKGDIR" : zprepo + "/zenpacks/" + pyname + "/" + rel_version,
		"TMPDIR" : zptemp + "/build/" + pyname + "/" + rel_version,
		"CLONECACHE" : zptemp + "/cloned-repositories/" + pyname,
		"BASE_OUTFILE" : pyname+"-"+rel_version+".egg",
		"BASE_JSONFILE" : pyname+"-"+rel_version+".json",
		"PYTHON_VERSION" : python_version,
		"ZENPACK_PY_NAME" : pyname,
		"TITLE": zpname, 
		"VERSION" : rel_version, 
		"TAG": zenpack_json["Releases"][rel_version]["Tag"], 
		"SRC_URI" : zenpack_json["Source URI"]
	}
	build_env["OUTFILE"] = build_env["PKGDIR"] + "/" + build_env["BASE_OUTFILE"]
	build_env["JSONFILE"] = build_env["PKGDIR"] + "/" + build_env["BASE_JSONFILE"]
	pipe = Popen(os.getcwd() + "/build.sh", env=build_env, stderr=STDOUT, stdout=PIPE)
	output = pipe.communicate()[0]
	status = pipe.wait()
	logfn = "{0[ZENPACK_PY_NAME]}-{0[VERSION]}.txt".format(build_env)
	if os.path.exists(os.path.join(logdir,logfn)):
		log("\nError: Log for %s already exists -- indicates duplicate build entry or wrong/duplicate ZenPack name\n" % logfn)
		return
	a = open(os.path.join(logdir,logfn),'w')
	if status == 0:
		os.symlink("../log/" + logfn, os.path.join(logdir_succ,logfn))
		log(": build OK\n")
	elif status == 2:
		build_fail += 1
		os.symlink("../log/" + logfn, os.path.join(logdir_fail,logfn))
		log(": build FAILED\n")
	elif status == 1:
		os.symlink("../log/" + logfn, os.path.join(logdir_succ,logfn))
		build_exist += 1
		log(": skipped\n")
	a.write(output)
	a.close()
	# write out JSON that can be imported by the wiki:
	log("Writing out JSON to %s..." % build_env["JSONFILE"])
	a = open(build_env["JSONFILE"], 'w')
	json.dump(zenpack_json, a, sort_keys=True, indent=4, separators=(',',": "))
	a.close()
	build_count += 1

zenpacks = readBuildDefs()
python_version="2.7"
for zp_name in zenpacks:
	if not "Releases" in zenpacks[zp_name]:
		log("No releases for %s" % zp_name)
		continue
	for rel_version in zenpacks[zp_name]["Releases"]:
		rel_info = zenpacks[zp_name]["Releases"][rel_version]
		log("Processing %s version %s (building with python %s)..." % ( zp_name, rel_info["Version"], python_version ))
		buildPack(zp_name, zenpacks[zp_name], rel_version)
log("%s builds completed. %s failed. %s skipped (already existed).\n" % (build_count, build_fail, build_exist))
#blog.close()
